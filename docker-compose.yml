version: '3.8'
services:
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: employee_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"  # Changed to avoid conflict
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network
  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
  airflow:
    image: apache/airflow:2.7.0
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://user:password@postgres:5432/employee_db
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/scripts:/opt/airflow/scripts
      - ./airflow/raw_data:/opt/airflow/raw_data
      - ./airflow/good_data:/opt/airflow/good_data
      - ./airflow/bad_data:/opt/airflow/bad_data
      - ./airflow/reports:/opt/airflow/reports
      - ./airflow/requirements.txt:/opt/airflow/requirements.txt
    ports:
      - "8080:8080"
    command: >
     bash -c "pip install -r /opt/airflow/requirements.txt &&
           airflow db init &&
           airflow users create --username admin --password admin --firstname Admin --lastname Admin --role Admin --email admin@example.com &&
           airflow scheduler & airflow webserver"

    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
  grafana:
    image: grafana/grafana:latest
    volumes:
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3001:3000"  # Changed to avoid conflict
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - "8001:8000"  # Changed to avoid conflict
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
  webapp:
    build:
      context: ./webapp
      dockerfile: Dockerfile
    ports:
      - "8502:8501"  # Changed to avoid conflict
    depends_on:
      - api
    networks:
      - app-network
volumes:
  postgres_data:
networks:
  app-network:
    driver: bridge