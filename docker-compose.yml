version: "3.8"

services:
  postgres:
    image: postgres:14
    container_name: postgres_db
    restart: always
    env_file: .env
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: employee_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      retries: 5
    networks:
      - app_network

  backend:
    build: ./backend
    container_name: backend
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8000:8000"
    env_file: .env
    volumes:
      - ./backend:/app
      - ./ml:/app/ml 
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - app_network

  frontend:
    build: ./frontend
    container_name: frontend_app
    restart: always
    depends_on:
      - backend
    ports:
      - "8501:8501"
    volumes:
      - ./frontend:/app
    networks:
      - app_network

  airflow:
    build: ./airflow_spike/airflow
    container_name: airflow
    depends_on:
      postgres:
        condition: service_healthy
    env_file: .env
    environment:
      AIRFLOW_HOME: /opt/airflow
      AIRFLOW__CORE__FERNET_KEY: BLLFkZnrVqgxdXvLsNsCQBHCmxQDQsUF9_xTg6qIqyA=
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:password@postgres_db:5432/employee_db
      AIRFLOW__WEBSERVER__WEB_SERVER_PORT: 8080
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: employee_db
    ports:
      - "8080:8080"
    volumes:
      - ./airflow_spike/airflow/dags:/opt/airflow/dags
      - ./airflow_spike/airflow/input-data:/opt/airflow/input-data
      - airflow_logs:/opt/airflow/logs
      - airflow_db:/opt/airflow/airflow.db
    command: >
      bash -c "
      airflow db upgrade &&
      airflow users create --username admin --password admin --firstname Air --lastname Flow --role Admin --email admin@example.com &&
      airflow scheduler & airflow webserver"
    networks:
      - app_network

  ml:
    build: ./ml
    container_name: ml_training
    restart: "no"
    volumes:
      - ./ml:/app/ml
    command: ["python", "train.py"]
    networks:
      - app_network

volumes:
  postgres_data:
  airflow_logs:
  airflow_db:

networks:
  app_network:
    driver: bridge
